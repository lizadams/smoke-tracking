#!/bin/csh -f
#******************************************************************************
# PURPOSE: smoketracking - get the SMOKE run home directory
#          list directory contents, script settings and
#          input and output filenames for diagnostics or to replicate SMOKE run
#
# NOTE:   Requires program log_analyzer
# NOTE:   First set the SMK_HOME env variable to the base SMOKE installation
# NOTE:   Then source the assigns file for the SMOKE runs
#
# USAGE: ./smoketracking
#
# HISTORY: 2014-06-25 lizadams@email.unc.edu, Created.
# STATUS: unreviewed, tested.
#******************************************************************************

   if ( ! $?SMK_HOME ) then
     echo 'please set 'SMK_HOME' environment variable and source assigns file'
     exit
   endif

set log_analyzer = `python ./log_analyzer/log_analyzer.py -k ./log_analyzer/known_messages.txt -l 2 -f test_log4.csv $LOGS/$SRCABBR/*_${SRCABBR}_*log`

set done = 0
set prefix_byte_count = 0

while ( $done == 0 )

  if ( $#argv == 0 ) then
    set input = ( ' ' )
    set done = 1;
  else if ( "$1" == 'loop' ) then
    set input = "$<"
    set input = ( $input )
    set prefix_byte_count = 1; # Prefix all output with a byte count.
  else
    set input = ( $argv )
    set done = 1;
  endif

  if ( "$input[1]" == 'status' ) then
    #  create a temporary directory to store files containing grep output
       mkdir -p ./tmp
  endif

    set array = (Success Failure)
    if ( "$input[2]" == 'A' ) then
    foreach program ( smkinven spcmat grdmat temporal smkmerge ) 
         set tmp_file = "./tmp/${program}.$SRCABBR.$$"
         set logfile = "${program}_${SRCABBR}_*.log"
         set reportfile = "report.$SRCABBR.$program.$GRID.$ASCEN.$$.rpt"
         grep 'Normal Completion' $LOGS/$SRCABBR/$logfile >> $tmp_file 
         echo "========================================="
         set id = `grep -c 'Normal Completion' $tmp_file`
         if ( $id >= 1 ) then
           echo "=========================================" |& tee -a $reportfile
           echo "$program $array[1] `grep -c 'Normal Completion' $tmp_file` times" |& tee -a $reportfile
           echo "=========================================" |& tee -a $reportfile 
           echo ${GRID} $ASCEN $SRCABBR "REPORT: " >> $reportfile
           echo 'File name and location at time' ${program} 'was run - NOTE: Directory Location may have been moved after run completed' >> $reportfile
         # note >> appends to the end of the file
           ls $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 OPEN $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 'opened as NEW' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 'opened as UNKNOWN' $LOGS/$SRCABBR/$logfile >> $reportfile
             grep 'opened as OLD' $LOGS/$SRCABBR/$logfile | grep -v TMP >> $reportfile
           grep -A 1 -i 'opened for input' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 -i 'opened for output' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep 'Value for' $LOGS/$SRCABBR/$logfile >> $reportfile
           else if ($id == 0) then
           grep -B 4 -A 2 'ERROR ABORT in subroutine' $LOGS/$SRCABBR/$logfile
           echo "========================================="
           echo "${program} logfile unsuccessful: check and rerun program"
           echo "location of log file:"
           ls $LOGS/$SRCABBR/$logfile
           echo "----------------------------------"
           echo $log_analyzer
                echo "more information is available from log_analyzer under ~/tmp/test.log4"
           break

         endif
     end
           echo "=========================================" >> $reportfile
           echo "Log File Names and Date Stamps" >> $reportfile 
           echo "=========================================" >> $reportfile
       ls $LOGS/$SRCABBR/*_${SRCABBR}_*.log >> $reportfile
#        echo '$SRCABBR=' $SRCABBR 
         set invlogdate   = `stat -c%Y $LOGS/$SRCABBR/smkinven_${SRCABBR}_*.log`
         set spcmatcmaqdate   = `stat -c%Y $LOGS/$SRCABBR/spcmat_${SRCABBR}_*cmaq*.log`
         set spcmatcamxdate = `stat -c%Y $LOGS/$SRCABBR/spcmat_${SRCABBR}_*camx*.log`
         set grdmatdate   = `stat -c%Y $LOGS/$SRCABBR/grdmat_${SRCABBR}_*$GRID*.log`
         set temporaldate = `stat -c%Y $LOGS/$SRCABBR/temporal_${SRCABBR}_*.log`
#        set smk2emisdate = `stat -c%Y $LOGS/$SRCABBR/smk2emis_${SRCABBR}_*$GRID*.log`

       set filedate = $invlogdate
#       echo 'filedate = '$invlogdate
                  echo "============================="
                  echo "checking if smkinven was run prior to other programs"
                  echo "=============================="
        foreach program ( smkinven spcmat grdmat temporal smkmerge )
           if ($program == smkinven) then
              set logdate = $invlogdate
           else if ($program == spcmat) then
              set logdate = $spcmatcmaqdate
           else if ($program == grdmat) then
              set logdate = $grdmatdate
           else if ($program == temporal) then
              set logdate = $temporaldate
           else if ($program == smkmerge) then
                  echo "============================="
                  echo "if there is more than one smkkmerge log file, then the last one will be used to check the logfile time"
                  echo "=============================="

           foreach file (`ls $LOGS/$SRCABBR/smkmerge_${SRCABBR}_*.log` )
              set mergedate = `ls $file | awk -F _ '{print $7}'`
              set mergelogdate = `stat -c%Y $LOGS/$SRCABBR/smkmerge_${SRCABBR}_*${mergedate}_${GRID}*.log`
              set logdate = $mergelogdate
           end
#           else if ($program == smk2emis) then
#              set logdate = $smk2emisdate
           endif
           if ($logdate >= $invlogdate) then
                    if ($program == smkinven) then
                    else if ($program == spcmat) then
                       echo "$program was run after smkinven"
                    else if ($program == grdmat) then
                       echo "$program was run after smkinven"
                    else if ($program == temporal) then
                       echo "$program was run after smkinven"
                    else if ($program == smkmerge) then
                       echo "$program was run after smkinven"
                  endif
           else
               if ($program == smkinven) then
                  echo 'smkinven'
               else if ($program == spcmat) then
                 echo "The logfile for smkinven is NEWER than $program. You may need to rerun all of the programs after smkinven"
               else if ($program == grdmat) then
                 echo "The logfile for spcmat is NEWER than $program. You *may* need to rerun grdmat, if an ERROR was reported above"
               else if ($program == temporal) then
                 echo "The logfile for grdmat is NEWER than $program. You may need to rerun temporal, if an ERROR was reported above"
               else if ($program == smkmerge) then
                 echo "The logfile for temporal is NEWER than $program. You may need to rerun smkmerge"
#               else if ($program == smk2emis) then
#                 echo "The logfile for temporal is NEWER than $program. You may need to rerun smk2emis"
               endif
           endif
              set filedate = $logdate
         end

                 echo "============================="
                   echo "checking if smkmerge was run after all other programs"
                  echo "=============================="
       foreach program ( smkinven spcmat grdmat temporal smkmerge )
         if ($program == smkinven) then
              set nlogdate = $invlogdate
           else if ($program == spcmat) then
              set nlogdate = $spcmatcmaqdate
           else if ($program == grdmat) then
              set nlogdate = $grdmatdate
           else if ($program == temporal) then
              set nlogdate = $temporaldate
           else if ($program == smkmerge) then
              set nlogdate = $mergelogdate
#           else if ($program == smk2emis) then
#              set nlogdate = $smk2emisdate
           endif
           if ($nlogdate <= $mergelogdate) then
                    if ($program == smkmerge) then
                    else if ($program == spcmat) then
                       echo "smkmerge was run after $program"
                    else if ($program == grdmat) then
                       echo "smkmerge was run after $program"
                    else if ($program == temporal) then
                       echo "smkmerge was run after $program"
#                    else if ($program == smk2emis) then
#                       echo "smkmerge was run after $program"
                  endif
           else
               echo "========================================"
               if ($program == smkinven) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == spcmat) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == grdmat) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == temporal) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == smkmerge) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               endif
               echo "========================================"
           endif
       end
       set maxtmp = 0
       foreach logdate ( $mergelogdate $invlogdate $spcmatcmaqdate $grdmatdate $temporaldate )
           if ($logdate >= $maxtmp) then
       #        echo "date $logdate is older recent than previous program"
               set maxtmp = $logdate
           else
       #        echo "date $logdate is more recent than the next program, may need to rerun"
           endif
       end
          if ( $maxtmp == $mergelogdate ) then
              echo "$array[1] in the order of runs: Smkmerge was correctly run after all processes"
#          else if ( $maxtmp == $smk2emisdate ) then
#              echo "$array[1] in the order of runs: Smkmerge was correctly run after all processes except smk2emis"
#          else if ( $maxtmp != $smk2emisdate ) then
#               echo "SMKMERGE may need to be rerun, it's log file must be run after all other processes except smk2emis"
          endif

         echo 'note: spcmat, grdmat and temporal can be run independently, but after smkinven and before smkmerge'
#          rm ./tmp/*${SRCABBR}*

    else if ( "$input[2]" == 'P' ) then
    echo 'in Point source'
    foreach program ( smkinven spcmat elevpoint grdmat laypoint mrgelev temporal smkmerge )
         set tmp_file = "./tmp/${program}.$SRCABBR.$$"
         set logfile = "${program}_${SRCABBR}_*.log"
         set reportfile = "report.$SRCABBR.${G_STDATE}_stdate.$$.log"
         grep 'Normal Completion' $LOGS/$SRCABBR/$logfile >> ${tmp_file}
         set id = `grep -c 'Normal Completion' ${tmp_file}`
         if ( $id >= 1 ) then
           echo "=========================================" |& tee -a $reportfile
           echo "$program $array[1] `grep -c 'Normal Completion' $tmp_file` times" |& tee -a $reportfile
           echo "=========================================" |& tee -a $reportfile
           echo 'File name and location at time' ${program} 'was run - NOTE: Directory Location may have been moved after run completed' >> $reportfile
            ls $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 OPEN $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 'opened as NEW' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 'opened as UNKNOWN' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 'opened as OLD' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 -i 'opened for input' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 -i 'opened for output' $LOGS/$SRCABBR/$logfile >> $reportfile
         else if ($id == 0) then
           grep -B 4 -A 2 'ERROR ABORT in subroutine' $LOGS/$SRCABBR/$logfile
         echo "========================================="
           echo "${program} logfile unsuccessful: check and rerun program"
           echo "location of log file:"
           ls $LOGS/$SRCABBR/$logfile
           echo "----------------------------------"
           echo $log_analyzer
                echo "more information is available from log_analyzer under ~/tmp/test.log4"
           break
         endif

         echo "========================================="
    end
          echo "=========================================" >> $reportfile
         echo "Log File Names and Date Stamps" >> $reportfile
           echo "=========================================" >> $reportfile
       ls -l $LOGS/$SRCABBR/*_${SRCABBR}_*.log >> $reportfile
       set mergelogdate = `stat -c%Y $LOGS/$SRCABBR/smkmerge_${SRCABBR}_*${G_STDATE}_$GRID*.log`
       set invlogdate   = `stat -c%Y $LOGS/$SRCABBR/smkinven_${SRCABBR}_*.log`
       set spcmatcmaqdate   = `stat -c%Y $LOGS/$SRCABBR/spcmat_${SRCABBR}_*cmaq*.log`
       set spcmatcamxdate = `stat -c%Y $LOGS/$SRCABBR/spcmat_${SRCABBR}_*camx*.log`
       set elevpointdate   = `stat -c%Y $LOGS/$SRCABBR/elevpoint_${SRCABBR}_*.log`
       set mrgelevdate   = `stat -c%Y $LOGS/$SRCABBR/mrgelev_${SRCABBR}_*$GRID*.log`
       set grdmatdate   = `stat -c%Y $LOGS/$SRCABBR/grdmat_${SRCABBR}_*$GRID*.log`
       set laypointdate   = `stat -c%Y $LOGS/$SRCABBR/laypoint_${SRCABBR}_*$GRID*.log`
       set temporaldate = `stat -c%Y $LOGS/$SRCABBR/temporal_${SRCABBR}_*.log`
       set smk2emisdate = `stat -c%Y $LOGS/$SRCABBR/smk2emis_${SRCABBR}_*$GRID*.log`
       set filedate = $invlogdate
                 echo "============================="
                   echo "checking if smkinven was run prior to other programs"
                  echo "=============================="
       foreach program ( smkinven spcmat grdmat laypoint temporal smkmerge )
           if ($program == smkinven) then
              set logdate = $invlogdate 
           else if ($program == spcmat) then
              set logdate = $spcmatcmaqdate
           else if ($program == grdmat) then
              set logdate = $grdmatdate
           else if ($program == laypoint) then
              set logdate = $laypointdate
           else if ($program == temporal) then
              set logdate = $temporaldate
           else if ($program == smkmerge) then
              set logdate = $mergelogdate
           endif
           if ($logdate >= $invlogdate) then
              set filedate = $logdate
               if ($program == spcmat) then
                   echo "$program was run after smkinven"
               else if ($program == grdmat) then
                   echo "$program was run after smkinven"
               else if ($program == laypoint) then
                   echo "$program was run after smkinven"
               else if ($program == temporal) then
                   echo "$program was run after smkinven"
               else if ($program == smkmerge) then
                   echo "$program was run after smkinven"
               endif
           else
               if ($program == smkinven) then
               else if ($program == spcmat) then
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun programs after smkinven"
               else if ($program == grdmat) then
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun grdmat"
               else if ($program == laypoint) then
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun laypoint"
               else if ($program == temporal) then 
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun temporal"
               else if ($program == smkmerge) then
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun smkmerge"
               else if ($program == smk2emis) then
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun smk2emis"
               endif
           endif
       end

                echo "============================="
                   echo "checking if smkmerge was run after all other programs"
                  echo "=============================="
       foreach program ( smkinven spcmat grdmat laypoint temporal smkmerge )
         if ($program == smkinven) then
              set logdate = $invlogdate
           else if ($program == spcmat) then
              set logdate = $spcmatcmaqdate
           else if ($program == grdmat) then
              set logdate = $grdmatdate
           else if ($program == laypoint) then
              set logdate = $laypointdate
           else if ($program == temporal) then
              set logdate = $temporaldate
           else if ($program == smkmerge) then
              set logdate = $mergelogdate
         endif
           if ($logdate <= $mergelogdate) then
                    if ($program == smkmerge) then
                    else if ($program == spcmat) then
                       echo "smkmerge was run after $program"
                    else if ($program == grdmat) then
                       echo "smkmerge was run after $program"
                    else if ($program == laypoint) then
                       echo "smkmerge was run after $program"
                    else if ($program == temporal) then
                       echo "smkmerge was run after $program"
                  endif
           else
               echo "========================================"
               if ($program == smkinven) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == spcmat) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == grdmat) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == laypoint) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == temporal) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               else if ($program == smkmerge) then
                 echo "ERROR - smkmerge was run before $program. You need to RERUN smkmerge"
               endif
               echo "========================================"
           endif
       end
       set maxtmp = 0
       foreach logdate ( $mergelogdate $invlogdate $spcmatcmaqdate $grdmatdate $laypointdate $temporaldate )
           if ($logdate >= $maxtmp) then
       ##        echo "date $logdate is older recent than previous program"
               set maxtmp = $logdate
           else
        ##       echo "date $logdate is more recent than the next program, may need to rerun"
           endif
       end
          if ( $maxtmp == $mergelogdate ) then
              echo "$array[1] in the order of runs: Smkmerge was correctly run after all processes"
          else
               echo "SMKMERGE may need to be rerun, it's log file must be run after all other processes except smk2emis"
          endif

              echo 'note: spcmat, grdmat and temporal can be run independently, as long as they are run after smkinven and prior to smkmerge'
#          rm ./tmp/*_${SRCABBR}_*
    else if ( "$input[2]" == 'B' ) then
         foreach program ( tmpbeis3 normbeis3 smkmerge )
            echo 'in Biogenic source' 
            set tmp_file = "./tmp/${program}_$SRCABBR.$$"
            set reportfile = "report.$SRCABBR.$program.$GRID.$ASCEN.$$.rpt"
            set logfile = "${program}_${SRCABBR}_*.log"
            grep 'Normal Completion' $LOGS/$logfile >> $biogenic_file
            echo "$program $array[1] `grep -c 'Normal Completion' $biogenic_file` times"
         if ( $id >= 1 ) then
           echo "=========================================" |& tee -a $reportfile
           echo "$program $array[1] `grep -c 'Normal Completion' $tmp_file` times" |& tee -a $reportfile
           echo "=========================================" |& tee -a $reportfile
           echo 'File name and location at time' ${program} 'was run - NOTE: Directory Location may have been moved after run completed' >> $reportfile
            ls $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 OPEN $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 'opened as NEW' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 'opened as UNKNOWN' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 'opened as OLD' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 -i 'opened for input' $LOGS/$SRCABBR/$logfile >> $reportfile
           grep -A 1 -i 'opened for output' $LOGS/$SRCABBR/$logfile >> $reportfile
         else if ($id == 0) then
           grep -B 4 -A 2 'ERROR ABORT in subroutine' $LOGS/$SRCABBR/$logfile
         echo "========================================="
           echo "${program} logfile unsuccessful: check and rerun program"
           echo "location of log file:"
           ls $LOGS/$SRCABBR/$logfile
           echo "----------------------------------"
           echo $log_analyzer
                echo "more information is available from log_analyzer under ~/tmp/test.log4"
           break
         endif
         echo "========================================="
       echo "Log File Names and Date Stamps" >> $reportfile
       ls -l $LOGS/$SRCABBR/*_${SRCABBR}_*.log >> $reportfile
       set mergelogdate = `stat -c%Y $LOGS/$SRCABBR/smkmerge_$SRCABBR*.log`
       set invlogdate   = `stat -c%Y $LOGS/$SRCABBR/smkinven_${SRCABBR}_*.log`
       set tmpbeis3date   = `stat -c%Y $LOGS/$SRCABBR/tmpbeis3_$SRCABBR*.log`
       set normbeis3date   = `stat -c%Y $LOGS/$SRCABBR/normbeis3_$SRCABBR*.log`
#       set smk2emisdate = `stat -c%Y $LOGS/$SRCABBR/smk2emis_$SRCABBR*.log`
       set filedate = $invlogdate
                echo "============================="
                   echo "checking if smkinven was run prior to other programs"
                  echo "=============================="
       foreach program ( smkinven tmpbeis3 normbeis3 smkmerge )
           if ($program == smkinven) then
              set logdate = $invlogdate
           else if ($program == tmpbeis3) then
              set logdate = $tmpbeis3date
           else if ($program == normbeis3) then
              set logdate = $normbeis3date
#           else if ($program == smk2emis) then
#              set logdate = $smk2emisdate
           else if ($program == smkmerge) then
              set logdate = $mergelogdate
           endif
           if ($logdate >= $invlogdate) then
              set filedate = $logdate
               if ($program == tmpbeis3) then
                   echo "$program was run after smkinven"
               else if ($program == normbeis3) then
                   echo "$program was run after smkinven"
#               else if ($program == smk2emis) then
#                   echo "$program was run after smkinven"
               else if ($program == smkmerge) then
                   echo "$program was run after smkinven"
               endif
           else
               if ($program == smkinven) then
               else if ($program == tmpbeis3) then
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun programs after smkinven"
               else if ($program == normbeis3) then
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun $program"
               else if ($program == smkmerge) then
                 echo "The logfile for smkinven is NEWER than $program. You need to rerun $program"
#               else if ($program == smk2emis) then
#                 echo "The logfile for smkinven is NEWER than $program. You need to rerun $program"
               endif
           endif
       end

       set maxtmp = 0
       foreach logdate ( $mergelogdate $tmpbeis3date $normbeis3date )
#$smk2emisdate
           if ($logdate >= $maxtmp) then
               set maxtmp = $logdate
           else
           endif
       end
          if ( $maxtmp == $mergelogdate ) then
              echo "$array[1] in the order of runs: Smkmerge was correctly run after all processes"
#          else if ( $maxtmp == $smk2emisdate ) then
#              echo "$array[1] in the order of runs: Smkmerge was correctly run after all processes except smk2emis"
#          else if ( $maxtmp != $smk2emisdate ) then
#               echo "SMKMERGE may need to be rerun, it's log file must be run after all other processes except smk2emis"
          endif


    else if ( "$input[2]" == 'M' ) then
    foreach program ( smkinven grdmat smkmerge )
         set mobile_file = "./tmp/${program}.mobile.$$"
         grep 'Normal Completion' $LOGS/${program}.mb.*.log >> $mobile_file
         echo "$program $array[1] `grep -c 'Normal Completion' $mobile_file` times"
    end
       ls -l $LOGS/*.mb*.log 
       set mergelogdate = `stat -c%Y $LOGS/smkmerge*mb*.log`
       set invlogdate   = `stat -c%Y $LOGS/smkinven*mb*.log`
       set spcmatdate   = `stat -c%Y $LOGS/spcmat*mb*.log`
       set grdmatdate   = `stat -c%Y $LOGS/grdmat*mb*.log`
       set temporaldate = `stat -c%Y $LOGS/temporal*mb*.log`
       set maxtmp = 0
       foreach logdate ( $mergelogdate $invlogdate $spcmatdate $grdmatdate $temporaldate )
           if ($logdate >= $maxtmp) then
               echo "date $logdate is older recent than previous program"
               set maxtmp = $logdate
           else
               echo "date $logdate is more recent than the next program, may need to rerun"
           endif
       end
          if ( $maxtmp == $mergelogdate ) then
              echo "$array[1] in the order of runs: Smkmerge was correctly run after all processes"
#          else if ( $maxtmp == $smk2emisdate ) then
#              echo "$array[1] in the order of runs: Smkmerge was correctly run after all processes except smk2emis"
#          else if ( $maxtmp != $smk2emisdate ) then
#               echo "SMKMERGE may need to be rerun, it's log file must be run after all other processes except smk2emis"
          endif


    endif

  else if ( "$input[1]" == 'debug' ) then

    if ( $prefix_byte_count == 0 ) then
      echo '../'
      /bin/ls -1Lp "$input[2]"
    else
      echo '../' > $temp_file
      /bin/ls -1Lp "$input[2]" >> $temp_file
      /bin/ls -l   $temp_file | /usr/bin/awk '{ print $5 }'
      /bin/cat     $temp_file
      /bin/rm -f   $temp_file
    endif

  else if ( "$input[1]" == 'variables' ) then

    if ( $prefix_byte_count == 0 ) then
      ${log_analyzer} "$input[2]"
    else
      ${log_analyzer} "$input[2]" > $temp_file
      /bin/ls -l $temp_file | /usr/bin/awk '{ print $5 }'
      /bin/cat   $temp_file
      /bin/rm -f $temp_file
    endif

  else if ( "$input[1]" == 'subset' ) then
    set variables = ''
    @ count = $#input
    @ index = 3

    while ( $index <= $count )
      set variables = "$variables $input[$index]"
      @ index += 1
    end

    $ncvariable "$input[2]" $temp_file $variables

    if ( $prefix_byte_count == 1 ) then # First output file byte count:
      /bin/ls -l $temp_file | /usr/bin/awk '{ print $5 }'
    endif

    /bin/cat $temp_file
    /bin/rm -f $temp_file
  else if ( "$input[1]" == 'quit' ) then
    set done = 1
  else
    echo
    echo "$0 - Diagnose smoke runs and track input/output and log files."
    echo
    echo "Usage: $0 status sector "
    echo
    echo 'Examples:'
    echo
    echo "command syntax:"
    echo "$0 status area"
    echo "output:"
    echo 'smkinven Success 1 times'
    echo
    echo 'Comments, questions: lizadams@email.unc.edu, 1-919-843-0518.'
    echo
  endif

end

